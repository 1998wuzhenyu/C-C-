指针和内存：
		指针：地址。
		内存单元：计算机内存最小的存储单元。  大小为 1个字节。每个内存单元都有唯一编号。
					称这个内存单元的编号为“地址”。

		指针变量：存地址的变量。

指针的定义和使用：

			int a=10;
			int *p=&a;     int* p;int *p; int * p;
			*p=250;			指针的解引用 和	间接引用
						解引用：  
						*p：  将p变量的内容取出，当成地址看待，找到该地址对应的内存空间。
								如果做左值（*p在等号左边）：存数据到地址空间中。
								如果做右值（*p在等号右边）：取出该地址空间中的内容。
					

			任意“指针”类型大小： 
					指针的大小与类型 无关。 只与当前使用的平台架构有关。 32位：4字节。64位：8字节。

野指针：
		1.没有一个有效的地址空间的指针。
			int *p；
			*p=1000；

			2）p变量有一个值，但该值不是可访问的内存区域。  例如0--255为留给系统操作的内存空间。
			int *p = 10;
			*p=2000; 
			所以在使用指针时候，必须[杜绝野指针]。

空指针：
		int *p=NULL;
		*p 时，p所对应的存储空间一定是一个 无效访问区域。

万能指针/泛型指针（void*）： 
		可接收任意一种变量地址。但是，在使用必须借助“强转”具体化数据的类型。 

		#include<stdio.h>
		int main()
		{   
			int a=10;
			char ch='R';

			void *p;//万能指针、泛型指针。
			p=&a;

			void *t=&ch;

			//由于指针类型不确定，需要强转 *(转换类型*)p--> *（int*）p
			printf("add:%o--value:%d\n",p,*(int*)p); 
			 printf("add:%o--value:%c\n",t,*(char*)t); 

			return 0;
		}



指针与数组：      【重要】数组名本身就是地址。
		数组名:
			【数组名是地址常量】---不可以被赋值。  即不允许：int a[2]={1,2};int b[2];   不可以 b=a;
											      但可以用 b[0]=1, 此方法进行修改。 因此，指针的赋值很有用。
			 指针是变量。可以用数组名给指针赋值。  


		取数组元素：
				1.int arr[]={1,2,3,4};
				2.int *p=arr;
				3.arr[0]==*(a+0)    ==p[0]=*(p+0)


				#include<stdio.h>
				int main()
				{   
					/*
					int a[]={1,2,3};
					int b[3];  //不可以b=a;
					int *p=b;
					*/

				   //取数组元素
				   int a[]={1,2,3,4,5,6,7,9};
				   int n=sizeof(a)/sizeof(a[0]);

				   int *p=a;  //数组名本身就是地址 所以不用加  & 。  3.

				   for(int i=0;i<n;i++)
				   {
					   //printf("%d\n",a[i]);//1.
					  // printf("%d\n",*(a+i));// 2. a[i]==*(a+i)
						 printf("p[%d]=%d\n",i,p[i]);  //3.      

				   }
					return 0;
				}



const关键字:
	修饰变量：
		const int a=30; //const 代表不可修改的常量。如果需要修改a值，可以用指针的方法进行修改。
		int main（）
		{
		    const int a=20;
			int *p=&a;
			*p=60;
			printf("\n\na=%d\n",a);
	     }
	修饰指针：
			const int *p;
				可以修改p，不可以修改*p  
				例子：
					int main() //  const int *p
					{   
						int a=10;
						int b=30;

						const int *p=&a;
					  //*p=500;   不允许
						p=&b;
						printf("\n\np=%d\n",*p);// const  *  修饰的是指针所指向的数据，不能修改数据。
												//只能通过对指针的 指向的地址进行修改
						return 0;
					} 

			int const *p;
					  同上
			int *const p；
					可以修改*p，不可以修改p。


			const int *const p;
					不可以修改*p，也 不可以修改p。

			【总结】：const向右修饰，被修饰部分即为只读。 
			【常用在】：在函数形参内，用来限制指针所对应的内存空间为只读。
					


		指针和数组区别：

					1.指针是变量，数组名为常量。
					2.sizeof（指针）---》4/8 看在什么平台。
				      sizeof（数组）---》数组的实际字节数。

		指针++ 操作数组：
						
						

指针加减运算：指针指向内存地址的位置的 移动       p+1==p++==  p+=1
		数据类型对指针的作用：
				1.间接引用：
					决定了指针的存储的地址开始，向后读取的字节数。（与指针本身的存储空间无关）
				2.加减运算“
					决定了指针进行+1 操作向后移动的字节数。   
						char：1字节。 short：2字节。 int、long：4字节。 long long：8字节。
		指针* / %: 不允许此类操作。

		指针 +-整数：
				1）普通指针变量+ -  整数 
							
							char *p:     打印p、p+1  偏移 1字节。
							short *p:    打印p、p+1  偏移 2字节。
							int *p:      打印p、p+1  偏移 4字节。
							long *p:     打印p、p+1  偏移 4字节。
							long long *p:打印p、p+1  偏移 8字节。


				2）在数组中  + -  整数:
							short arr[]={1，2，5，8};  
							int *p =arr;
							p+3;//向后（右）偏移3个元素
							p-2; //向前（左）偏移2个元素

						1.指针在数组中 + - 整数：
							
							
							int main()
							{
								int a[]={1,2,3,4,5,6,7,8,9,0};
								//int *p=a;  //即 a==&a[0]
								 int *p=&a[5];
								 printf("p+1=%d--add:%p\n",*p+1,p+1);
     
								 printf("p-3=%d--add:%p\n",*(p-3),p-3);
								 printf("add:%p--p-3=%d\n",&a[2],a[2]);

							}



						2.使用指针操作数组元素：


							//使用指针++操作数组元素
							int main()

							{
								int arr[10];
								int *p=arr;
							  for(int i=0;i<10;i++)   
							  {
								  scanf("%d\n",&*(arr+i));
							  }

								int n=sizeof(arr)/sizeof(arr[0]);
								printf("first p=%p\n",p);

								for(int i=0;i<n;i++)
								{
								  printf("%d ",*(p+i));  //*(p+i)==arr[i]  不改变p值，当循环结束，指针重新指向首地址。

								  //print("%d ",*p);p++; //改变p值，当打印循环结束后，指针指向 一块无效地址    区域，变成野指针。
														    // 一次加一个 int 大小的元素空间

								}
								printf("\n"); 
								printf("len:%d",p-arr);//字符个数
								printf("last p=%p\n",p);

								return 0;

							}

						1.*(p+i)==arr[i]:不改变p值，当循环结束，指针重新指向首地址。
						2.p++           ：改变p值，当循环结束，指针指向 无效区域，变成野指针。



				3）&数组名 +1 ：&a+1    .   加一个  数组的大小（数组元素个数*sizeof（数组元素类型)）

				int main()
				{
				   long  a[]={1,2,3,4,5,6,7,8,9,0};

					printf("a=%p--&a[0]:%p--&a:%p\n",a,&a[0],&a);//证明 a==a[0]==&a   %p
					printf("a=%d--&a[0]:%d--&a:%d\n",a,&a[0],&a);
					  printf("a+1=%p--&a[0+1]:%p\n",a+1,&a[0+1]);
    
					printf("&a  =%p\n",&a); 
					printf("&a+1=%p\n",&a+1); //此处 &a+1; 加的是1个数组的大小
				}

					   
		指针 + - 指针： 
				指针+指针：不允许此类操作。 
				指针-指针：可以操作，对于普通变量来说，但没有实际意义。	
									对于数组来说，表示偏移的元素个数。
						
 


				

指针的比较运算：
	  > < ==
				1.普通变量：语法允许，无实际意义。
				2.对于数组：地址之间可以进行比较大小。
						可以得到，元素存储的先后顺序。 

				2.	int *p;  //这两行等价于：int *p=NULL；
					p=NULL;
					if(p!=NULL)
						printf();
					else
						printf();

指针实现strlen函数：

			
				#include<stdio.h>

				int myStrlen1(char str1[]);
				int myStrlen1(char str2[]);

				int main()
				{   
					char str1[]="hello";
					char str2[]="who are you";

					int ret1=myStrlen1(str1);
					int ret2=myStrlen2(str2);

					printf("\nmyStrlen1=%d\n",ret1);
					printf("\nmyStrlen2=%d\n",ret2);

					return 0;
				}

				//借助数组实现 strlen（）
				int myStrlen1(char str1[])
				{
					int i=0;
					while ((str1[i]!='\0'))
					{
					   i++;
					}
					return i;
    
				}

				//借助指针实现
				int myStrlen2(char str2[] )
				{
					char *p=str2;// str2的地址位 str2[0];
					while (*p!='\0')
					{
					   p++;
					}
    
					return p-str2; //返回原数组个数

				}




指针数组：
			一个存储地址的数组，数组内部所有元素是地址。
			指针数组本质，是一个二级指针。
			二维数组也是一个二级指针。

			例：
				#include<stdio.h>
				int main()
				{
					int a=10;
					int b=20;
					int c=30;  

					int *p1=&a;
					int *p2=&b;
					int *p3=&c;

					int *arr[]={p1,p2,p3};//整型指针数组arr，存的都是整型地址。 

					printf("p1--%d",*(arr[0]));//arr[0]=*(arr+0)
					printf("p1--%d",*(*(arr+0)));//arr[0]=*(arr+0)
					 printf("p1--%d",**arr);//优先级
				}

多级指针：

		int a=0;			
		int *p=&a;					一级指针是  变量的地址

		int **pp=&p;				二级指针是 一级指针的地址

		int ***ppp=&pp;				三级指针是 二级指针的地址

		int ****pppp=&ppp;			四级指针是 三级指针的地址
			......					n级指针是  n-1级指针的地址

								   【注意】 多级指针不能跳跃定义。 

		对应关系：
		ppp==&pp;				三级指针
		*ppp==pp==&p;			二级指针
		**ppp==*pp == p==&a;	一级指针
		***ppp==**pp== *p==a;	普通整形

		例：
			#include<stdio.h>
			//多级指针
			int main()
			{
				int a=10;
				int *p=&a;
				int **pp=&p;
				int ***ppp=&pp;	

				printf("a=%d\n",a);
				printf("*p=%d\n",*p);
				printf("**pp=%d\n",**pp);
				printf("***ppp=%d\n",***ppp);

			}


指针和函数：


		

 
