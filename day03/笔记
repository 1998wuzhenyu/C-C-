extern:
		表示声明。没有内存空间，不能提升。

const:
		限定一个变量为只读变量。

volatile：
		防止编译器优化代码。
		volatile int a=40；
		例如在单片机跑马灯
				flag=0; //led灭
				flag=1;
				flag=0;
				flag-1;
				flag=0;

				程序设定亮灭过程，但编译优化，
				看头尾发现flag都为0，就优化为直接flag=0。

register：
		定义一个寄存器变量。 

字符串：
		在C语言中，用“”（双引号）的一串字符，称之为字符串。一定有一个结束的标记符'\0'。
		char ch='A':一个字节。
		"abc"-->'a' 'b' 'c' '\0'
		‘a' 不等价于 “a”  因为 "a"包含 字符 ‘a’ ‘\0’。 
	
	printf()函数 :
	-->%s。挨着字符串的第一个字符开始打印，打印到 ‘\0’结束。
	   %d:打印整数。
	   %c:打印字符。
	   %x：打印无符号。
	   %m.n：打印实型。一共m位（整数、小数、小数点），n位小数。
	   %0m.nf: 打印m位数，保留n位小数，多出位置用0补。浮点型
	   %%：显示一个%。转义字符‘\’对%转义无效。
	   %-Ns：显示N个字符的字符串。不足N用空格向右填充。
	   %Ns：显示N个字符的字符串。不足N用空格向左填充。 

putchar（）函数:
		输出一个字符到屏幕。  putchar('a')
		可以直接使用ASCII码。 putchar('97')
		不能输出字符串。

		‘abc’既不是一个有效字符也不是一个有效字符串。

scanf（）函数：

			从键盘接受一个有效输入。
			1.接收 整数%d：
			      int a,b,c; 创建变量空间，等待用户输入。
				  scanf("%d%d%d",&a,&b,&c);

			2.接收字符 %c：
				  char a,b,c;
				  scanf("%c %c %c",&a,&b,&c);

			3.接收 字符串 %s：
				  char str[10];
				  scanf("%s",str);//变量名要去地址传给scanf，数组名 本身表示地址，不要&符。 
				  1）具有安全隐患。如果存储空间不足，数据能存储到内存中，但不被保护。
				  【空间不足不要使用】
				  2）scanf函数接收字符串时，碰到 空格 和 换行会自动终止。
				  不能使用scanf接收带有空格的字符串。

getchar（）函数：
		接收用户输入的一个字符，返回接收到的ASCII码。
		常用putchar（‘\n’）来换行。 



算术运算符：
		 先* /后+ -
		 除法运算后，得到的结果赋值给整形变量（int）时，取整数部分。
		 除0：错误操作。不允许。
		 对0取余：错误操作。不允许。
		 % 取余 ：10%3----1


++和--
		前缀自增、自减：
				先自增，再取值
				int a=10；
				++a；  //a=a+1

		后缀自增、自减：
				int a=10
				a++；   //a=a+1
				先取值，再自增

赋值运算：
		int a=5;
		a-=10;   a=a-10
		a+=2	 a=a+10
		a*=2	 a=a*2
		a/=2
		a%=2

比较运算符：
		== 等于
		！=不等于
		<  小于
		<= 小于等于
		>  大于
		>=大于等于

逻辑运算符： 
		！非    ！a
		 &&与	a&&b
		 ||或	a||b

优先级：
		[] ()  > ++ --(后缀高于前缀)（强转）sizeof  > 算术运算 >
		比较运算>逻辑运算>三目运算（条件运算）>赋值运算>逗号运算

三目运算：   ？：
		表达式1？表达式2：表达式3
			表达式1 是一个判别表达式。 如果真。取值表达式2
										如果假。取值表达式3.
				int a=3;
				int b=4;
				int c
				c=(a>b)?a:b;

逗号运算符：
		int a=10,b=20,c=30;

		int x=(a=1,b=2,c=3);//逗号运算符

		printf(x)//输出x中最后一个变量的值



类型转换：
		1.隐式类型转换：
			遵循一定规则，由编译系统自动完成。
				精度小--->精度大    ok
				占用内存小-->内存大 ok

				小-->大     有可能发生数据丢失
				 
		    由赋值产生的类型转换

		2.显式类型转换：
			强制转换类型：
				语法：  
					（目标类型）带转换变量
					（目标类型）带转换表达式

					float p=3.6;
					int   w=4;

					double sum= (int)(w*p); 

				大多数用于函数调用期间，实参给形参传值。

顺序结构：
		顺序结构：if、if...else if   、 switch...case、
		选择结构：
		循环结构：

switch:  其中 break 是为了防止case穿透 ，
		如果在一个case中没有break，会向下执行下一个case。 

do...while()
		上来先执行一次
		int main()
		{
			int a=1;
			
			do  {
				a++
				printf("a=%d\n",a);

			}while(a<10);

			return 0;
		}

for循环：
		for(表达式1：表达式2：表达式3)
		{
			循环体
		}

		表达式1--》表达式2（判别表达式）--》为真--》进入循环体。--》表达式3
		--》表达式2（判别表达式）--》为真--《进入循环体--》表达式3....

	循环因子：
			定义在for之外，for循环结束，也能使用。
			定义在for之内，for循环结束，不能使用。
	for的3个表达式均可省略，但  ； 不可以省略。

for中表达式有多个：
		for（int i=1,a=3;i<10,a<20;i++,a+=5）
		{
			printf("i=%d--a=%d",i,a);
		}


猜数字：
		1.生成一个随机数。
			1）添加一个随机数种子。srand（time(NULL));
			2)添加头文件<stdlib.h> <time.h>
			3)生成随机数 int n=rand()%100;//0---99

		2.循环输入数据猜。
			int num;
			while(1)  //死循环
			{
				接收用户输入scanf（“%d”，&num）；
				比较用户输入的数 和 随机生成的数 的大小
				if（n>num){}
				else if(n<num){}
				else

			}
		3.跳出循环。
			break。跳出循环

break：
		1）for，whiel中跳出一级循环。
		2）switch中是防止穿透。


		

			   

		 
		

	     
